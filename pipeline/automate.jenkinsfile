pipeline {

    agent any

    environment {
        ENV = "${env.GIT_BRANCH == 'origin/prod' ? 'prod' : 'dev'}"
        TELEGRAM_TOKEN = credentials('telegram-token')
        VERSION = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Build Project') {
            parallel {
                stage('Build Admin Dashboard') {
                    steps {
                        dir('admin') {
                            sh 'echo "Building Admin Dashboard..."'
                            sh 'ls -lart'  
                            script {
                                docker.withRegistry("", "${BASE_REGISTRY}") {
                                    def adminDashboardImage = docker.build("$BASE_REGISTRY_USER/efree-admin-dashboard:1.0.$VERSION", ".")
                                    adminDashboardImage.push()
                                }
                            }
                        }
                    }
                }
                
                stage('Build Website Client') {
                    steps {
                        dir('website') {
                            sh 'echo "Building Website Client..."'
                            sh 'ls -lart'  
                            script {
                                docker.withRegistry("", "${BASE_REGISTRY}") {
                                    def clientAppImage = docker.build("$BASE_REGISTRY_USER/efree-client-app:1.0.$VERSION", ".")
                                    clientAppImage.push()
                                }
                            }
                        }
                    }
                }
            }
        }
    }

        // stage('Push Docker Image') {
        //     steps {
        //         script {
        //             withCredentials([usernamePassword(credentialsId: 'base-registry', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
        //                 sh 'echo "Logging into Docker Registry..."'
        //                 sh 'docker login -u $USER -p $PASS ${REGISTRY}'
        //                 sh 'echo "Pushing Docker Images..."'
        //                 sh 'docker push ${REGISTRY}/efree-admin-dashboard:${TAG}'
        //                 sh 'docker push ${REGISTRY}/efree-client-app:${TAG}'
        //             }
        //         }
        //     }
        // }

        // stage('Apply Kubernetes Manifests') {
        //     steps {
        //         script {
        //             withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
        //                 sh """
        //                     export KUBECONFIG=${KUBECONFIG}
        //                     echo "Applying Kubernetes manifests..."
        //                     kubectl apply -f argocd/spring/spring-application.yaml
        //                 """
        //             }
        //         }
        //     }
        // }

        // stage('Clean Workspace') {
        //     steps {
        //         cleanWs()
        //     }
        // }
    // }

    // post {
    //     always {
    //         script {
    //             try {
    //                 def COMMITER = sh (
    //                     script: 'git --no-pager show -s --format=\'%ae\'',
    //                     returnStdout: true
    //                 ).trim()
    //                 def EMOTE = currentBuild.result == 'SUCCESS' ? '✅' : '❌'
    //                 def DESC = currentBuild.result == 'SUCCESS' ? 'GitOps applyed into cluster successfully!' : 'GitOps applyed into cluster fail!'
    //                 def STATUS = "${currentBuild.result}${EMOTE}"
    //                 def MESSAGE = """
    //                 <b>Status : </b>${STATUS}
    //                 <b>Branch : </b>${env.GIT_BRANCH}
    //                 <b>Commiter : </b>${COMMITER}
    //                 <b>Commit ID : </b>${env.GIT_COMMIT}
    //                 <b>Environment : </b>${ENV}
    //                 <b>Build Url : </b> <a href=\"${BUILD_URL}\">view detail</a>
    //                 <b>Description : </b>${DESC}
    //                 """.stripIndent()

    //                 sh "curl -X POST https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage -d chat_id=${TELEGRAM_CHAT_ID} -d text='${MESSAGE}' -d parse_mode=HTML --max-time 30"
    //             } catch (Exception err) {
    //                 echo "${err}"
    //             }
    //         }
    //     }
    // }

}